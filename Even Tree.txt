/* Enter your code here. Read input from STDIN. Print output to STDOUT */
#include<stdio.h>
#include<malloc.h>


void insert(int item);
int del();
int isEmpty();

struct node
{
	int info;
	struct node *link;
}*front=NULL,*rear=NULL;

int main()
{
    int N,M,i,total,front,flag,j,op=0;
    scanf("%d%d",&N,&M);
    int count[N+1];
    int Arr[M][2];
    
    
    for(i=0;i<M;i++)
    {
        scanf("%d%d",&Arr[i][0],&Arr[i][1]);
    }
    
    for(i=1;i<=N;i++)
    {
        count[i]=1;
    }
    
    for(i=0;i<M;i++)
    {
        count[Arr[i][1]]=0;//internal nodes are numberd as 0 ie they are to be visited once
    }
    
    for(i=1;i<=N;i++)
    {
        if(count[i]==0)
        {
            insert(i);
            total=0;
            
            while(!isEmpty())
            {
                front=del();
                
                flag=0;
                
                if(count[front]!=0)
                {
                    total=total+count[front];
                    flag=1;
                }
                
                else
                {
                    total++;
                }
                
                if(flag==0)
                {
                    for(j=0;j<M;j++)
                    {
                        if(Arr[j][1]==front)
                            insert(Arr[j][0]);
                    }
                }
                
            }
            
            count[i]=total;
            
        }
    }
    
    for(i=2;i<=N;i++)
    {
        if(count[i]%2==0)
            op++;
    }
    printf("%d",op);
    
    return 0;
}

void insert(int item)
{
	struct node *tmp;
	tmp=(struct node *)malloc(sizeof(struct node));
	if(tmp==NULL)
	{
		
		return;
	}
	tmp->info = item;
	tmp->link=NULL;
	if(front==NULL)		 /*If Queue is empty*/
		front=tmp;
	else
		rear->link=tmp;
	rear=tmp;
}


int del()
{
	struct node *tmp;
	int item;
	if( isEmpty( ) )
	{
		
		
	}
	tmp=front;
	item=tmp->info;
	front=front->link;
	free(tmp);
	return item;
}


int isEmpty()
{
	if(front==NULL)
		return 1;
	else
		return 0;

}


